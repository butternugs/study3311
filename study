create or replace function seq(lo int, hi int, inc int) returns setof IntValue as $$
declare
	i integer;
	r IntValue%Rowtype;
begin
	i = lo;
	if (inc > 0) then
		while (i <= hi)
		loop
			r.val = i;
			return next r;
			i = i + inc;
		end loop;
	elsif (inc < 0) then
		while (i >= hi) 
		loop
			r.val = i;
			return next r;
			i = i + inc;
		end loop;
	end if;
	return;
end;
$$ language plpgsql;


create or replace function hotelsIn(_addr text) returns text as $$
declare
	r record;
	out text = '';
begin
	for r in select * from bars where addr = _addr
	loop
		out = out || r.name || e'\n';
	end loop
	return out;
end;
$$ language plpgsql;

create or replace function hotelsIn(_addr text) returns text as $$
declare 
	r record;
	out text;
begin
	out = 'Hotel in _addr:'
	for r in select * from bars where addr = _addr
	loop
		out = out ||' '|| r.name;
	end loop;
	return out;
end;
$$ language plpgsql;

create or replace function hotelsIn(_addr text) returns text as $$
declare
	pubnames text;
	r record;
	i integer := 0;
	howmany integer := 0;
begin
	select count(*) into checkCount from bars where addr = _addr;
	if (checkCount)

end;


create or replace function empSalary(_name integer) returns real as $$
declare
	_sal real;
begin
	select salary into _sal from employees where id=_name;
	return _sal;
end;
$$ language plpgsql;

create or replace function branchInfo(_location text) returns Branches as $$
declare
	_branchInfo Branches;
begin
	select * into _branchInfo from Branches where location=_location;
	return _branchInfo;
end;
$$ language plpgsql;

create or replace function minSal(_min real) returns setof text as $$
declare
	_emp text;
begin
	 for _empName in select name from employees where salary > _min
	 loop
	 	return next _emp;
	 end loop;
end;
$$ language plpgsql;


create or replace function branchName() returns text as $$
declare
	out text;
	totalSent real;
	a record;
	b record;
begin
	for b in select * from Branches
	loop
		out = out || 'Branch: ' || b.location || ', ' || b.address || ;
	end loop;
	return;
end;
$$ language plpgsql;

create or replace function branchList() returns text
as $$
declare
	a   record;
	b   record;
	tot integer;
	qry text;
	out text := e'\n';
begin
	for b in select * from Branches
	loop
		out := out || 'Branch: ' || b.location || ', ';
		out := out || b.address || e'\n' || 'Customers: ';
		tot := 0;
		for a in select * from Accounts where branch=b.location
		loop
			out := out || ' ' || a.holder;
			tot := tot + a.balance;
		end loop;
		select sum(balance) into tot
		from Accounts where branch=b.location;
		out := out || E'\nTotal deposits: ';
		out := out || to_char(tot,'$999999.99');
		out := out || E'\n---\n';
	end loop;
	return out;
end;
$$ language plpgsql;


create function fixCoursesOnAddCourseEnrolment() returns trigger as $$
declare
	_nS integer;
	_nE integer;
	_sum integer;
	_avg float;
begin
	select nS, nE, avg into _nS, _nE, _avg
	From Courses
	where id=new.course;

	_nS = _nS + 1;

	if (new.studEval is not null) then
		_nE = _nE + 1;
		if (nS <= 10 or (3*_nE)<= _nS) then
			_avg = NULL;
		else
			select sum(studEval) into _sum from CourseEnrolments where course=new.course;
			_sum = _sum + studEval;
			_avg = _sum/_nE;
		end if;
	end if;

	update Courses
	set nS = _nS, nE = _nS, avgEval = _avg
	on new.course = id;

	return new;

end;
$$ language plpgsql

create function fixCoursesOnDropCourseEnrolment() returns trigger as $$
declare 
	_nS integer;
	_nE integer; 
	_sum integer;
	_avg float;
begin
	select nS, nE, avg into _nS, _nE, _avg
	From courses
	where id=old.course;

	_nS = _nS - 1;

	if (old.studEval is not null) then
		_nE = _nE - 1;
		if (nS <= 10 or (3*_nE)<= _nS) then
			_avg = NULL;
		else
			select sum(studEval) into _sum from CourseEnrolments where course=old.course;
			_sum = _sum - old.studEval;
			_avg = _sum/_nE;
		end if;
	end if;

	update Courses
	set nS = _nS, nE = _nE, _avgEval = _avg
	on old.course = id;
end;
$$ language plpgsql

create function fixCoursesOnModCourseEnrolment() returns trigger as $$
declare
	_nS integer;
	_nE integer;
	_oldEval integer;
	_newEval integer; 
	_sum integer;
	_avg float;
begin

	select nS, nE, avg into _nS, _nE, _avg from Courses where old.course=id;
	if (old.studeval is null and new.studeval is not null) then
		_nE = _nE + 1;
	end if;

	if (old.studeval <> new.studeval) then
		select sum(studeval) into _sum from courseenrolments where course.id=old.course;
		_avg = (_sum - old.studeval + new.studeval)/_nE
	end if;

	update courses
	on nE = _nE, nS= _nS, avgEval = _avg
	where course.id=old.course;

	return new; 

end;
$$ language plpgsql;


create function accountOpen() returns trigger as $$
declare
	_added integer;
	_curr integer;
begin
	select total_money into _curr from bank where account.id=new.account;

	update Assests
	on 
end;
$$ language plpgsql;


create function addedBooking() returns trigger as $$
declare
	_seatsAvail integer;
begin
	select seatsAvail into _seatsAvail From Flights where id=new.flight;

	if (avail = 0) then
		raise exception 'flight full'
	end if;

	update Flight
	on seatsAvail = seatsAvail - 1
	where id=new.flight;

end;
$$ language plpgsql;

create trigger addedbooking
after insert
for each row execute procedure addedBooking();

10 
a)
Ans = Job

b)
Sel[jcity=London](Job)

c)
Proj[sid](sel[jname=j1](Supplier Join Job))

d)
Sel[quant >= 300 and Quan <= 700](SPJ)

e)
tmp1 = Proj[part, colour](Part)
tmp2 = Proj[part, pcity](Part)
Ans = tmp1 union tmp2

f)
Proj[sid pid jid](Sel[scity=pcity=jcity](Supplier JOin Part Join Job))

i)
proj[pid](sel[scity=London](SUppliers JOin Parts))

j)

l)
Count(Proj[job](Sel[ssid=s1](SPJ)))

m)
Sum(Proj[quant](sel[sid=s1 && par = p1](SPJ Join Parts)))

n)
proj[pid, jid, sum[quantity]](SPJ )

o)
PartUsage = GroupBy[Part][Avg qty](SPJ)
Answer = Proj[pid](Sel[avg > 320](PartUsage))

p)
Proj[jname](sel[sid=s1](SPJ Join Jobs JOin Suppliers))

s)
s1Parts = Proj[pid](sel[supplier=s1](SPJ))
S1partsjoinjob = s1parts join spj
ans = proj[jobs](s1partsjoinjob)

t)
s1status = proj[status](sel[supplier=s1](SUpplier))
ans = proj[suppliers](sel[status<statusS1](SUpplier))

u)
Notalls1jobs = Proj[job](Sel[suppliers=s1](SPJ))
Alljobs = proj[job](job)
Ans = alljobs - notalls1jobs

v)
SPJall = proj[sid, pid, jid](spj)
all jobs = proj[jid](jobs)
ans = proj[suppliers](spjall / alljobs)


Q1
drop view if exists q1;
create view q1 
as
select t.country as team, count(i.match) as matches
from Teams t
Join Involves I on i.team=t.id
group by team;

Q2
select p.name as player, count(g.scoredby) as goals
from Goals g
join Players p on p.id=g.scoredby
where g.rating = 'amazing'
group by player
having goals > 1
order by p.name asc;

q3
q3a
select p.name as name, p.memberof as memberof
from Players p
where p.name not in
	(select g.scoredby
	from Goals g);

select t.country as country, count(country) as counting 
from q3a
Join Teams t on q3a.memberof=t.id;


q5
drop view if exists getYellows;
create view getYellows
as
select t.country as countryY, count(c.givenTo) as yellows
From cards c 
Join Players p on p.id=c.givenTo
Join Teams t on t.id=p.memberof
where cardType='yellow'
group by t.country;

drop view if exists getReds;
create view getReds 
as
select t.country as countryR, count(c.givenTo) as reds
From cards c
Join Players p on p.id=c.givenTo
Join Teams t on t.id=p.memberof
where cardType='red'
group by t.country;

drop view if exists q5;
create view q5
as
select t.country as country, ifnull(reds,0) as reds, ifnull(yellows,0) as yellows
from Teams t 
Left Outer Join getReds on t.country = getReds.countryR
Left Outer Join getYellows on t.country=getYellows.countryY;

q6
select m.city as location, m.playedOn as date, t1.country as team1, ifnull()

drop view if exists team1Count;
create view
as
select m.id as matches, t.country as country, ifnull(count(t.country),0)
from Teams t
Join Players p on p.memberof=t.id
Left Outer Join Goals g on g.scoredBy=p.id
Join Matches m on g.scoredIn=m.id
group by m.id, t.country;

drop view if exists team2Count;
create view
as
select m.id as match, t.country as country, count(distinct g.id)
from Matches m
Join Involves i on (m.id=i.match)
Join Teams t on (i.team=t.id)
Join players p on (t.id=p.memberof)
left join goals g on (m.id=g.scoredin and p.id=g.scoredby)
group by m.id;

drop view if exists q6;
create view
as
Select m.city as location, m.playedon as playedod t1.country

	DROP VIEW IF EXISTS Q6;
	CREATE VIEW Q6
	AS
	SELECT m.city AS location, m.playedOn AS date, t1.country AS team1, COUNT(DISTINCT g1.id) AS goals1, t2.country AS team2, COUNT(DISTINCT g2.id) AS goals2
	FROM Matches m 
	JOIN Involves i1 ON (m.id = i1.match)
	JOIN Involves i2 ON (i1.match = i2.match AND i1.team <> i2.team)
	JOIN Teams t1 ON (i1.team = t1.id)
	JOIN Teams t2 ON (i2.team = t2.id AND t1.country < t2.country)
	JOIN Players p1 ON (t1.id = p1.memberOf)
	JOIN Players p2 ON (t2.id = p2.memberOf)
	LEFT JOIN Goals g1 On (m.id = g1.scoredIn AND p1.id = g1.scoredBy)
	LEFT JOIN Goals g2 On (m.id = g2.scoredIn AND p2.id = g2.scoredBy)
	GROUP BY m.id

Aggregate
create or replace function mult(state integer, x integer) returns integer as $$
begin
	return state * x
end;
$$ language plpgsql

create aggregate prod(integer) {
	stype = integer;
	initCond = 1;
	sfunc=mult;	

}

create or replace function concat(soFar text, input text) returns text as $$
begin
	return soFar || , || input ;
end;
$$ language plpgsql

create aggregate concatText(text) {
	stype=text;
	initCond='';
	sfunc=concat;
}
